# This file defines a user profile.
{
  description = "My Home Manager configuration";

  inputs = {
    nixpkgs.url = "nixpkgs/nixos-23.11";
    # nixpkgs.url = "nixpkgs/nixos-unstable";

    # Here, home manager is an object with url and inputs.nixpkgs.follows attributes.
    home-manager = {
      url = "github:nix-community/home-manager/release-23.11";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  # Nix arrow function, except nix uses a : instead of =>. They are called by doing: functionName param.
  # here, outputs is assigned an arrow function that takes an attribute set as an argument.
  outputs = { nixpkgs, home-manager, ... }:
    # in let, you can declare some intermediate variables and use them within let and in, but not outside the let in expression. You can also declare arrow functions here.
    let
      lib = nixpkgs.lib;
      system = "x86_64-linux";
      # inherit system basically does system = system, where the first system is the system attribute in the attribute set you're passing into the nixpkgs function, and you're equating it to the system attribute from above. It's an easy way to do so if both attributes have the same name.
      pkgs = import nixpkgs { inherit system; };
    in {
      # This is the output of the function. home-manager wants to see a homeConfigurations attribute. Each attribute in homeConfigurations represents a single user profile. Generated by home-manager.lib.homeManagerConfiguration { ... }
      homeConfigurations = {
        # Aventrius is assigned a function call.
        Aventrius = home-manager.lib.homeManagerConfiguration {
	  # does pkgs = pkgs (as before).
	  inherit pkgs;
	  # Paths are first-class data types. They don't need to be given as strings in Nix.
	  modules = [ ./home.nix ];
	};
      };
    };
}
